@INPROCEEDINGS(smart, 
 author = "Simone Faro and Thierry Lecroq and Stefano Borz\`i and Simone Di Mauro and Alessandro Maggio",
 title = "The String Matching Algorithms Research Tool",
 booktitle = "Proceedings of the Prague Stringology Conference 2016",
 address = "Czech Technical University in Prague, Czech Republic",
 editor = "Jan Holub and Jan {\v{Z}}{\v{d}}{\'{a}}rek",
 isbn = "978-80-01-05996-8",
 year = 2016,
 pages = "99--111",
)

@article{CHAIRUNGSEE2012109,
title = {Using minimal absent words to build phylogeny},
journal = {Theoretical Computer Science},
volume = {450},
pages = {109-116},
year = {2012},
note = {Implementation and Application of Automata (CIAA 2011)},
issn = {0304-3975},
doi = {https://doi.org/10.1016/j.tcs.2012.04.031},
url = {https://www.sciencedirect.com/science/article/pii/S0304397512003866},
author = {Supaporn Chairungsee and Maxime Crochemore},
keywords = {Minimal absent words, Forbidden words, Trie of bounded depth, String similarity, Phylogeny construction},
abstract = {An absent word in a sequence is a segment that does not occur in the given sequence. It is a minimal absent word if all its proper factors occur in the given sequence. In this paper, we review the concept of minimal absent words, which includes the notion of shortest absent word. We present an efficient method for computing the minimal absent words of bounded length using a trie of bounded depth, representing bounded length factors. This method produces the minimal absent words of given bounded length, and furthermore our technique provides a linear-time algorithm with less memory usage than previous solutions. We also present an approach, the length-weighted index, to distinguish sequences of different organisms using their minimal absent words. The results show that we can build a phylogenetic tree based on the information collected.}
}

@article{findingMaw,
  title={On finding minimal absent words},
  author={Pinho, Armando J and Ferreira, Paulo JSG and Garcia, Sara P and Rodrigues, Jo{\~a}o MOS},
  journal={BMC bioinformatics},
  volume={10},
  number={1},
  pages={1--11},
  year={2009},
  publisher={Springer}
}

@misc{smartHelp,
  title = {SMART. String Matching Algorithms Research Tool},
  howpublished = {\url{https://www.dmi.unict.it/faro/smart/howto.php}},
  note = {Accesso: 2022-05-02}
}

@misc{smartGithub,
  title = {GitHub Repository: smart-tool/smart},
  howpublished = {\url{https://github.com/smart-tool/smart}},
  note = {Accesso: 2022-05-02}
}

@article{maw1,
title = {Automata and forbidden words},
journal = {Information Processing Letters},
volume = {67},
number = {3},
pages = {111-117},
year = {1998},
issn = {0020-0190},
doi = {https://doi.org/10.1016/S0020-0190(98)00104-5},
url = {https://www.sciencedirect.com/science/article/pii/S0020019098001045},
author = {M. Crochemore and F. Mignosi and A. Restivo},
keywords = {Formal languages, Factorial language, Anti-factorial language, Factor code, Factor automaton, Forbidden word, Avoiding a word, Failure function},
abstract = {Let L(M) be the (factorial) language avoiding a given anti-factorial language M. We design an automaton accepting L(M) and built from the language M. The construction is effective if M is finite. If M is the set of minimal forbidden words of a single word ν, the automaton turns out to be the factor automaton of ν (the minimal automaton accepting the set of factors of ν). We also give an algorithm that builds the trie of M from the factor automaton of a single word. It yields a nontrivial upper bound on the number of minimal forbidden words of a word.}
}

@misc{smartHomepage,
  title = {SMART | smart: GitHub Pages},
  howpublished = {\url{https://smart-tool.github.io/smart/}},
  note = {Accesso: 2022-05-02}
}

@inproceedings{suffixArray,
author = {Manber, Udi and Myers, Gene},
title = {Suffix Arrays: A New Method for on-Line String Searches},
year = {1990},
isbn = {0898712513},
publisher = {Society for Industrial and Applied Mathematics},
address = {USA},
booktitle = {Proceedings of the First Annual ACM-SIAM Symposium on Discrete Algorithms},
pages = {319–327},
numpages = {9},
location = {San Francisco, California, USA},
series = {SODA '90}
}

@article{scMAW,
  title={Alignment-free sequence comparison using absent words},
  author={Charalampopoulos, Panagiotis and Crochemore, Maxime and Fici, Gabriele and Merca{\c{s}}, Robert and Pissis, Solon P},
  journal={Information and Computation},
  volume={262},
  pages={57--68},
  year={2018},
  publisher={Elsevier}
}

@misc{mawGit,
  title = {GitHub. maw: Minimal Absent Words. Solon P. Pissis},
  howpublished = {\url{https://github.com/solonas13/maw}},
  note = {Accesso: 2022-05-02}
}

@misc{RMQ,
  doi = {10.48550/ARXIV.0812.2775},
  url = {https://arxiv.org/abs/0812.2775},
  author = {Fischer, Johannes},
  keywords = {Data Structures and Algorithms (cs.DS), FOS: Computer and information sciences, FOS: Computer and information sciences, E.1},
  title = {Optimal Succinctness for Range Minimum Queries},
  publisher = {arXiv},
  year = {2008},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{react,
  title = {React – Una libreria JavaScript per creare interfacce utente},
  howpublished = {\url{https://it.reactjs.org/}},
  note = {Accesso: 2022-05-02}
}

@misc{node,
  title = {Node.js},
  howpublished = {\url{https://nodejs.org/it/}},
  note = {Accesso: 2022-05-02}
}

@misc{lwIndexGithub,
  title = {GitHub Repository - lw-index: Tool simil-SMART},
  howpublished = {\url{https://github.com/v1enna/lw-index}},
  note = {Accesso: 2022-05-02}
}

@misc{smartGUI,
  title = {GitHub Repository - smart-tool/smart-gui},
  howpublished = {\url{https://github.com/smart-tool/smart-gui}},
  note = {Accesso: 2022-05-02}
}